{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","run-it/tests/app.jshint.lint-test.js","run-it/tests/components/break-time.jshint.lint-test.js","run-it/tests/components/footer-menu.jshint.lint-test.js","run-it/tests/components/talk-item.jshint.lint-test.js","run-it/tests/controllers/now.jshint.lint-test.js","run-it/tests/controllers/schedule.jshint.lint-test.js","run-it/tests/helpers/destroy-app.js","run-it/tests/helpers/destroy-app.jshint.lint-test.js","run-it/tests/helpers/ember-basic-dropdown.js","run-it/tests/helpers/ember-power-select.js","run-it/tests/helpers/module-for-acceptance.js","run-it/tests/helpers/module-for-acceptance.jshint.lint-test.js","run-it/tests/helpers/resolver.js","run-it/tests/helpers/resolver.jshint.lint-test.js","run-it/tests/helpers/start-app.js","run-it/tests/helpers/start-app.jshint.lint-test.js","run-it/tests/integration/components/break-time-test.js","run-it/tests/integration/components/break-time-test.jshint.lint-test.js","run-it/tests/integration/components/footer-menu-test.js","run-it/tests/integration/components/footer-menu-test.jshint.lint-test.js","run-it/tests/integration/components/talk-item-test.js","run-it/tests/integration/components/talk-item-test.jshint.lint-test.js","run-it/tests/models/speaker.jshint.lint-test.js","run-it/tests/models/speech.jshint.lint-test.js","run-it/tests/resolver.jshint.lint-test.js","run-it/tests/router.jshint.lint-test.js","run-it/tests/routes/app.jshint.lint-test.js","run-it/tests/routes/application.jshint.lint-test.js","run-it/tests/routes/index.jshint.lint-test.js","run-it/tests/routes/now.jshint.lint-test.js","run-it/tests/routes/schedule.jshint.lint-test.js","run-it/tests/routes/speech.jshint.lint-test.js","run-it/tests/services/schedule.jshint.lint-test.js","run-it/tests/test-helper.js","run-it/tests/test-helper.jshint.lint-test.js","run-it/tests/unit/controllers/application-test.js","run-it/tests/unit/controllers/application-test.jshint.lint-test.js","run-it/tests/unit/controllers/now-test.js","run-it/tests/unit/controllers/now-test.jshint.lint-test.js","run-it/tests/unit/controllers/schedule-test.js","run-it/tests/unit/controllers/schedule-test.jshint.lint-test.js","run-it/tests/unit/models/speaker-test.js","run-it/tests/unit/models/speaker-test.jshint.lint-test.js","run-it/tests/unit/models/speech-test.js","run-it/tests/unit/models/speech-test.jshint.lint-test.js","run-it/tests/unit/routes/app-test.js","run-it/tests/unit/routes/app-test.jshint.lint-test.js","run-it/tests/unit/routes/application-test.js","run-it/tests/unit/routes/application-test.jshint.lint-test.js","run-it/tests/unit/routes/index-test.js","run-it/tests/unit/routes/index-test.jshint.lint-test.js","run-it/tests/unit/routes/now-test.js","run-it/tests/unit/routes/now-test.jshint.lint-test.js","run-it/tests/unit/routes/schedule-test.js","run-it/tests/unit/routes/schedule-test.jshint.lint-test.js","run-it/tests/unit/routes/speech-test.js","run-it/tests/unit/routes/speech-test.jshint.lint-test.js","run-it/tests/unit/services/schedule-test.js","run-it/tests/unit/services/schedule-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('run-it/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('run-it/tests/components/break-time.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/break-time.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/break-time.js should pass jshint.');\n  });\n});","define('run-it/tests/components/footer-menu.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/footer-menu.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/footer-menu.js should pass jshint.');\n  });\n});","define('run-it/tests/components/talk-item.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/talk-item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/talk-item.js should pass jshint.\\ncomponents/talk-item.js: line 9, col 3, Unexpected \\'@\\'.\\ncomponents/talk-item.js: line 14, col 3, Unexpected \\'@\\'.\\ncomponents/talk-item.js: line 19, col 3, Unexpected \\'@\\'.\\ncomponents/talk-item.js: line 24, col 3, Unexpected \\'@\\'.\\ncomponents/talk-item.js: line 3, col 8, \\'computed\\' is defined but never used.\\n\\n5 errors');\n  });\n});","define('run-it/tests/controllers/now.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/now.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/now.js should pass jshint.\\ncontrollers/now.js: line 8, col 3, Unexpected \\'@\\'.\\ncontrollers/now.js: line 13, col 3, Unexpected \\'@\\'.\\ncontrollers/now.js: line 2, col 8, \\'computed\\' is defined but never used.\\n\\n3 errors');\n  });\n});","define('run-it/tests/controllers/schedule.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/schedule.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/schedule.js should pass jshint.\\ncontrollers/schedule.js: line 11, col 3, Unexpected \\'@\\'.\\ncontrollers/schedule.js: line 2, col 8, \\'computed\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('run-it/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('run-it/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('run-it/tests/helpers/ember-basic-dropdown', ['exports', 'ember', 'ember-runloop', 'jquery', 'ember-native-dom-helpers/test-support/helpers'], function (exports, _ember, _emberRunloop, _jquery, _emberNativeDomHelpersTestSupportHelpers) {\n  exports.nativeTap = nativeTap;\n  exports.clickTrigger = clickTrigger;\n  exports.tapTrigger = tapTrigger;\n  exports.fireKeydown = fireKeydown;\n  var nativeClick = _emberNativeDomHelpersTestSupportHelpers.click;\n\n  exports.nativeClick = nativeClick;\n\n  function nativeTap(selector) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var touchStartEvent = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchStartEvent[key] = options[key];\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(touchStartEvent);\n    });\n    var touchEndEvent = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchEndEvent[key] = options[key];\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(touchEndEvent);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      var $element = (0, _jquery['default'])(scope);\n      if ($element.hasClass('ember-basic-dropdown-trigger')) {\n        selector = scope;\n      } else {\n        selector = scope + ' ' + selector;\n      }\n    }\n    (0, _emberNativeDomHelpersTestSupportHelpers.click)(selector, options);\n  }\n\n  function tapTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    nativeTap(selector, options);\n  }\n\n  function fireKeydown(selector, k) {\n    var oEvent = document.createEvent('Events');\n    oEvent.initEvent('keydown', true, true);\n    _jquery['default'].extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(oEvent);\n    });\n  }\n\n  // acceptance helpers\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('clickDropdown', function (app, cssPath) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      clickTrigger(cssPath, options);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('tapDropdown', function (app, cssPath) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      tapTrigger(cssPath, options);\n    });\n  };\n});","define('run-it/tests/helpers/ember-power-select', ['exports', 'jquery', 'ember-runloop', 'ember-test', 'ember-native-dom-helpers/test-support/helpers'], function (exports, _jquery, _emberRunloop, _emberTest, _emberNativeDomHelpersTestSupportHelpers) {\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n\n  // Helpers for integration tests\n  function fireNativeMouseEvent(eventType, selectorOrDomElement) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var event = undefined,\n        target = undefined;\n    try {\n      event = new window.Event(eventType, { bubbles: true, cancelable: true, view: window });\n    } catch (e) {\n      // fix IE11: \"Object doesn't support this action\"\n      event = document.createEvent('Event');\n      var bubbles = true;\n      var cancelable = true;\n      event.initEvent(eventType, bubbles, cancelable);\n    }\n\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    if (typeof selectorOrDomElement === 'string') {\n      target = (0, _jquery['default'])(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    (0, _emberRunloop['default'])(function () {\n      return target.dispatchEvent(event);\n    });\n  }\n\n  function nativeMouseDown(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mousedown', selectorOrDomElement, options);\n  }\n\n  function nativeMouseUp(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mouseup', selectorOrDomElement, options);\n  }\n\n  function triggerKeydown(domElement, k) {\n    var oEvent = document.createEvent('Events');\n    oEvent.initEvent('keydown', true, true);\n    _jquery['default'].extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    (0, _emberRunloop['default'])(function () {\n      domElement.dispatchEvent(oEvent);\n    });\n  }\n\n  function typeInSearch(scopeOrText, text) {\n    var scope = '';\n\n    if (typeof text === 'undefined') {\n      text = scopeOrText;\n    } else {\n      scope = scopeOrText;\n    }\n\n    var selectors = ['.ember-power-select-search-input', '.ember-power-select-search input', '.ember-power-select-trigger-multiple-input', 'input[type=\"search\"]'].map(function (selector) {\n      return scope + ' ' + selector;\n    }).join(', ');\n\n    return (0, _emberNativeDomHelpersTestSupportHelpers.fillIn)(selectors, text);\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-power-select-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    return (0, _emberNativeDomHelpersTestSupportHelpers.click)(selector, options);\n  }\n\n  function nativeTouch(selectorOrDomElement) {\n    var event = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    var target = undefined;\n\n    if (typeof selectorOrDomElement === 'string') {\n      target = (0, _jquery['default'])(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    (0, _emberRunloop['default'])(function () {\n      return target.dispatchEvent(event);\n    });\n    (0, _emberRunloop['default'])(function () {\n      event = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n      target.dispatchEvent(event);\n    });\n  }\n\n  function touchTrigger() {\n    var selector = '.ember-power-select-trigger';\n    nativeTouch(selector);\n  }\n\n  // Helpers for acceptance tests\n\n  exports['default'] = function () {\n    _emberTest['default'].registerAsyncHelper('selectChoose', function (app, cssPath, valueOrSelector) {\n      var $trigger = find(cssPath + ' .ember-power-select-trigger');\n\n      if ($trigger === undefined || $trigger.length === 0) {\n        $trigger = find(cssPath);\n      }\n\n      if ($trigger.length === 0) {\n        throw new Error('You called \"selectChoose(\\'' + cssPath + '\\', \\'' + valueOrSelector + '\\')\" but no select was found using selector \"' + cssPath + '\"');\n      }\n\n      var contentId = '' + $trigger.attr('aria-owns');\n      var $content = find('#' + contentId);\n      // If the dropdown is closed, open it\n      if ($content.length === 0 || $content.hasClass('ember-basic-dropdown-content-placeholder')) {\n        nativeMouseDown($trigger.get(0));\n        wait();\n      }\n\n      // Select the option with the given text\n      andThen(function () {\n        var potentialTargets = (0, _jquery['default'])('#' + contentId + ' .ember-power-select-option:contains(\"' + valueOrSelector + '\")').toArray();\n        var target = undefined;\n        if (potentialTargets.length === 0) {\n          // If treating the value as text doesn't gave use any result, let's try if it's a css selector\n          potentialTargets = (0, _jquery['default'])('#' + contentId + ' ' + valueOrSelector).toArray();\n        }\n        if (potentialTargets.length > 1) {\n          target = potentialTargets.filter(function (t) {\n            return t.textContent.trim() === valueOrSelector;\n          })[0] || potentialTargets[0];\n        } else {\n          target = potentialTargets[0];\n        }\n        if (!target) {\n          throw new Error('You called \"selectChoose(\\'' + cssPath + '\\', \\'' + valueOrSelector + '\\')\" but \"' + valueOrSelector + '\" didn\\'t match any option');\n        }\n        nativeMouseUp(target);\n      });\n    });\n\n    _emberTest['default'].registerAsyncHelper('selectSearch', function (app, cssPath, value) {\n      var triggerPath = cssPath + ' .ember-power-select-trigger';\n      var $trigger = find(triggerPath);\n      if ($trigger === undefined || $trigger.length === 0) {\n        triggerPath = cssPath;\n        $trigger = find(triggerPath);\n      }\n\n      if ($trigger.length === 0) {\n        throw new Error('You called \"selectSearch(\\'' + cssPath + '\\', \\'' + value + '\\')\" but no select was found using selector \"' + cssPath + '\"');\n      }\n\n      var contentId = '' + $trigger.attr('aria-owns');\n      var isMultipleSelect = (0, _jquery['default'])(cssPath + ' .ember-power-select-trigger-multiple-input').length > 0;\n\n      var $content = (0, _jquery['default'])('#' + contentId);\n      var dropdownIsClosed = $content.length === 0 || $content.hasClass('ember-basic-dropdown-content-placeholder');\n      if (dropdownIsClosed) {\n        nativeMouseDown(triggerPath);\n        wait();\n      }\n      var isDefaultSingleSelect = (0, _jquery['default'])('.ember-power-select-search-input').length > 0;\n\n      if (isMultipleSelect) {\n        (0, _emberNativeDomHelpersTestSupportHelpers.fillIn)(triggerPath + ' .ember-power-select-trigger-multiple-input', value);\n      } else if (isDefaultSingleSelect) {\n        (0, _emberNativeDomHelpersTestSupportHelpers.fillIn)('.ember-power-select-search-input', value);\n      } else {\n        // It's probably a customized version\n        var inputIsInTrigger = !!find(cssPath + ' .ember-power-select-trigger input[type=search]')[0];\n        if (inputIsInTrigger) {\n          (0, _emberNativeDomHelpersTestSupportHelpers.fillIn)(triggerPath + ' input[type=search]', value);\n        } else {\n          (0, _emberNativeDomHelpersTestSupportHelpers.fillIn)('#' + contentId + ' .ember-power-select-search-input[type=search]', 'input');\n        }\n      }\n    });\n\n    _emberTest['default'].registerAsyncHelper('removeMultipleOption', function (app, cssPath, value) {\n      var elem = find(cssPath + ' .ember-power-select-multiple-options > li:contains(' + value + ') > .ember-power-select-multiple-remove-btn').get(0);\n      try {\n        nativeMouseDown(elem);\n        wait();\n      } catch (e) {\n        console.warn('css path to remove btn not found');\n        throw e;\n      }\n    });\n\n    _emberTest['default'].registerAsyncHelper('clearSelected', function (app, cssPath) {\n      var elem = find(cssPath + ' .ember-power-select-clear-btn').get(0);\n      try {\n        nativeMouseDown(elem);\n        wait();\n      } catch (e) {\n        console.warn('css path to clear btn not found');\n        throw e;\n      }\n    });\n  };\n});","define('run-it/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'run-it/tests/helpers/start-app', 'run-it/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _runItTestsHelpersStartApp, _runItTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _runItTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _runItTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('run-it/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('run-it/tests/helpers/resolver', ['exports', 'run-it/resolver', 'run-it/config/environment'], function (exports, _runItResolver, _runItConfigEnvironment) {\n\n  var resolver = _runItResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _runItConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _runItConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('run-it/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('run-it/tests/helpers/start-app', ['exports', 'ember', 'run-it/app', 'run-it/config/environment'], function (exports, _ember, _runItApp, _runItConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    // use defaults, but you can override\n    var attributes = _ember['default'].assign({}, _runItConfigEnvironment['default'].APP, attrs);\n\n    _ember['default'].run(function () {\n      application = _runItApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('run-it/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('run-it/tests/integration/components/break-time-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('break-time', 'Integration | Component | break time', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'u6Vvb0+Y',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"break-time\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'Wj+DCovD',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"break-time\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('run-it/tests/integration/components/break-time-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/break-time-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/break-time-test.js should pass jshint.');\n  });\n});","define('run-it/tests/integration/components/footer-menu-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('footer-menu', 'Integration | Component | footer menu', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '4PAlIkaR',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"footer-menu\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'BnJ70iY4',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"footer-menu\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('run-it/tests/integration/components/footer-menu-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/footer-menu-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/footer-menu-test.js should pass jshint.');\n  });\n});","define('run-it/tests/integration/components/talk-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('talk-item', 'Integration | Component | talk item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'n3xi/wR/',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"talk-item\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'MO7gjSoV',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"talk-item\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('run-it/tests/integration/components/talk-item-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/talk-item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/talk-item-test.js should pass jshint.');\n  });\n});","define('run-it/tests/models/speaker.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/speaker.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/speaker.js should pass jshint.');\n  });\n});","define('run-it/tests/models/speech.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/speech.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/speech.js should pass jshint.');\n  });\n});","define('run-it/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('run-it/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('run-it/tests/routes/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/app.js should pass jshint.');\n  });\n});","define('run-it/tests/routes/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('run-it/tests/routes/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass jshint.\\nroutes/index.js: line 8, col 7, Missing semicolon.\\n\\n1 error');\n  });\n});","define('run-it/tests/routes/now.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/now.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/now.js should pass jshint.\\nroutes/now.js: line 8, col 7, Missing semicolon.\\n\\n1 error');\n  });\n});","define('run-it/tests/routes/schedule.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/schedule.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/schedule.js should pass jshint.');\n  });\n});","define('run-it/tests/routes/speech.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/speech.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/speech.js should pass jshint.');\n  });\n});","define('run-it/tests/services/schedule.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/schedule.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/schedule.js should pass jshint.\\nservices/schedule.js: line 3, col 7, \\'DATA\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('run-it/tests/test-helper', ['exports', 'run-it/tests/helpers/resolver', 'ember-qunit'], function (exports, _runItTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_runItTestsHelpersResolver['default']);\n});","define('run-it/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('run-it/tests/unit/controllers/application-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/controllers/now-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:now', 'Unit | Controller | now', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('run-it/tests/unit/controllers/now-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/now-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/now-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/controllers/schedule-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:schedule', 'Unit | Controller | schedule', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('run-it/tests/unit/controllers/schedule-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/schedule-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/schedule-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/models/speaker-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('speaker', 'Unit | Model | speaker', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('run-it/tests/unit/models/speaker-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/speaker-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/speaker-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/models/speech-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('speech', 'Unit | Model | speech', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('run-it/tests/unit/models/speech-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/speech-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/speech-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/routes/app-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:app', 'Unit | Route | app', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('run-it/tests/unit/routes/app-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/app-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/app-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('run-it/tests/unit/routes/application-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('run-it/tests/unit/routes/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/routes/now-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:now', 'Unit | Route | now', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('run-it/tests/unit/routes/now-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/now-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/now-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/routes/schedule-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:schedule', 'Unit | Route | schedule', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('run-it/tests/unit/routes/schedule-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/schedule-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/schedule-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/routes/speech-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:speech', 'Unit | Route | speech', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('run-it/tests/unit/routes/speech-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/speech-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/speech-test.js should pass jshint.');\n  });\n});","define('run-it/tests/unit/services/schedule-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:schedule', 'Unit | Service | schedule', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('run-it/tests/unit/services/schedule-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/schedule-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/schedule-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('run-it/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}